name: Update Crypto Data and News

# Controls when the action will run.
# Runs on a schedule (every 2 hours) and also on manual trigger.
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */2 * * *' # This runs every 2 hours
  push:
    branches: [ master, main ]
    paths:
      - 'update_content.py'
      - '.github/workflows/main.yml'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checks out your repository so the job can access it
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2. Sets up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. Installs necessary Python packages
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Runs the Python script to fetch data and create posts
      - name: Run update script
        # Pass the secrets as environment variables to the script
        env:
          NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
          BINANCE_API_KEY: ${{ secrets.BINANCE_API_KEY }}
        run: python ./update_content.py

      # 5. Commit and push if there are changes
      - name: Commit and push if there are changes
        run: |
          git config --global user.name "Automated Publisher"
          git config --global user.email "actions@github.com"
          git add -A
          # Check if there are changes to commit
          git diff --staged --quiet || git commit -m "Automated Content Update - $(date)"
          git push

      # 6. Setup Ruby for Jekyll
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      # 7. Setup Pages
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      # 8. Install Jekyll dependencies
      - name: Install Jekyll dependencies
        run: |
          gem install bundler jekyll
          bundle install

      # 9. Build with Jekyll
      - name: Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      # 10. Upload artifact
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
